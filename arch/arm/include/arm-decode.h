/*
 * File:   arm-decode.h
 * Author: spink
 *
 * Created on 10 February 2015, 16:46
 */

#ifndef ARM_DECODE_H
#define	ARM_DECODE_H

#include <define.h>

namespace captive {
	namespace arch {
		namespace arm {
			class ArmDecode
			{
			public:
				enum Opcodes {
					UNKNOWN,

					INST_arm_adc1,
					INST_arm_adc2,
					INST_arm_adc3,
					INST_arm_add1,
					INST_arm_add2,
					INST_arm_add3,
					INST_arm_and1,
					INST_arm_and2,
					INST_arm_and3,
					INST_arm_b,
					INST_arm_bic1,
					INST_arm_bic2,
					INST_arm_bic3,
					INST_arm_bkpt,
					INST_arm_bl,
					INST_arm_blx1,
					INST_arm_blx2,
					INST_arm_bx,
					INST_arm_bxj,
					INST_arm_cdp,
					INST_arm_cdp2,
					INST_arm_cf1,
					INST_arm_cf2,
					INST_arm_clz,
					INST_arm_cmn1,
					INST_arm_cmn2,
					INST_arm_cmn3,
					INST_arm_cmp1,
					INST_arm_cmp2,
					INST_arm_cmp3,
					INST_arm_eor1,
					INST_arm_eor2,
					INST_arm_eor3,
					INST_arm_insn_ext,
					INST_arm_ldc,
					INST_arm_ldm,
					INST_arm_ldm_usr,
					INST_arm_ldr1,
					INST_arm_ldr1_pc,
					INST_arm_ldr2,
					INST_arm_ldrb1,
					INST_arm_ldrb2,
					INST_arm_ldrbt1,
					INST_arm_ldrbt2,
					INST_arm_ldrd,
					INST_arm_ldrh,
					INST_arm_ldrsb,
					INST_arm_ldrsh,
					INST_arm_ldrt1,
					INST_arm_ldrt2,
					INST_arm_mcr,
					INST_arm_mcr_fpu,
					INST_arm_mla,
					INST_arm_mov1,
					INST_arm_mov2,
					INST_arm_mov3,
					INST_arm_mrc,
					INST_arm_mrc_fpu,
					INST_arm_mrs,
					INST_arm_msr1,
					INST_arm_msr2,
					INST_arm_mul,
					INST_arm_mvn1,
					INST_arm_mvn2,
					INST_arm_mvn3,
					INST_arm_orr1,
					INST_arm_orr2,
					INST_arm_orr3,
					INST_arm_pld,
					INST_arm_rsb1,
					INST_arm_rsb2,
					INST_arm_rsb3,
					INST_arm_rsc1,
					INST_arm_rsc2,
					INST_arm_rsc3,
					INST_arm_sbc1,
					INST_arm_sbc2,
					INST_arm_sbc3,
					INST_arm_smlal,
					INST_arm_smlaxy,
					INST_arm_smull,
					INST_arm_stc,
					INST_arm_stm,
					INST_arm_stm_usr,
					INST_arm_str1,
					INST_arm_str2,
					INST_arm_strb1,
					INST_arm_strb2,
					INST_arm_strbt1,
					INST_arm_strbt2,
					INST_arm_strd,
					INST_arm_strh,
					INST_arm_strt1,
					INST_arm_strt2,
					INST_arm_sub1,
					INST_arm_sub2,
					INST_arm_sub3,
					INST_arm_swi,
					INST_arm_swp,
					INST_arm_swpb,
					INST_arm_teq1,
					INST_arm_teq2,
					INST_arm_teq3,
					INST_arm_tst1,
					INST_arm_tst2,
					INST_arm_tst3,
					INST_arm_umlal,
					INST_arm_umull,
					INST_arm_wfi,
					INST_thumb_addoff_add,
					INST_thumb_addsub,
					INST_thumb_alu_adc,
					INST_thumb_alu_and,
					INST_thumb_alu_asr,
					INST_thumb_alu_bic,
					INST_thumb_alu_cmn,
					INST_thumb_alu_cmp,
					INST_thumb_alu_eor,
					INST_thumb_alu_lsl,
					INST_thumb_alu_lsr,
					INST_thumb_alu_mul,
					INST_thumb_alu_mvn,
					INST_thumb_alu_neg,
					INST_thumb_alu_orr,
					INST_thumb_alu_ror,
					INST_thumb_alu_sbc,
					INST_thumb_alu_tst,
					INST_thumb_b,
					INST_thumb_bkpt,
					INST_thumb_bl_hi,
					INST_thumb_bl_lo,
					INST_thumb_cbr,
					INST_thumb_hro_add,
					INST_thumb_hro_bx,
					INST_thumb_hro_cmp,
					INST_thumb_hro_mov,
					INST_thumb_lda_add,
					INST_thumb_lro_mov,
					INST_thumb_lshw_ldrh,
					INST_thumb_lshw_strh,
					INST_thumb_lsimm_ldr,
					INST_thumb_lsimm_str,
					INST_thumb_lsro_ldr,
					INST_thumb_lsro_str,
					INST_thumb_lsse_ldrh,
					INST_thumb_lsse_ldsb,
					INST_thumb_lsse_ldsh,
					INST_thumb_lsse_strh,
					INST_thumb_mcas_add,
					INST_thumb_mcas_cmp,
					INST_thumb_mcas_mov,
					INST_thumb_mcas_sub,
					INST_thumb_mls_ldmia,
					INST_thumb_mls_stmia,
					INST_thumb_msr,
					INST_thumb_pcrl_ldr,
					INST_thumb_pp_pop,
					INST_thumb_pp_push,
					INST_thumb_spr_ldr,
					INST_thumb_spr_str,
					INST_thumb_swi,
					INST_thumb_undef,
				};

				Opcodes opcode;
				uint32_t ir;

				void decode(uint32_t address);
			};
		}
	}
}

#endif	/* ARM_DECODE_H */

